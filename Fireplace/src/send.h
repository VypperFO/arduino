/* IRremoteESP8266: IRsendDemo - demonstrates sending IR codes with IRsend.
 *
 * Version 1.1 January, 2019
 * Based on Ken Shirriff's IrsendDemo Version 0.1 July, 2009,
 * Copyright 2009 Ken Shirriff, http://arcfn.com
 *
 * An IR LED circuit *MUST* be connected to the ESP8266 on a pin
 * as specified by kIrLed below.
 *
 * TL;DR: The IR LED needs to be driven by a transistor for a good result.
 *
 * Suggested circuit:
 *     https://github.com/crankyoldgit/IRremoteESP8266/wiki#ir-sending
 *
 * Common mistakes & tips:
 *   * Don't just connect the IR LED directly to the pin, it won't
 *     have enough current to drive the IR LED effectively.
 *   * Make sure you have the IR LED polarity correct.
 *     See: https://learn.sparkfun.com/tutorials/polarity/diode-and-led-polarity
 *   * Typical digital camera/phones can be used to see if the IR LED is flashed.
 *     Replace the IR LED with a normal LED if you don't have a digital camera
 *     when debugging.
 *   * Avoid using the following pins unless you really know what you are doing:
 *     * Pin 0/D3: Can interfere with the boot/program mode & support circuits.
 *     * Pin 1/TX/TXD0: Any serial transmissions from the ESP8266 will interfere.
 *     * Pin 3/RX/RXD0: Any serial transmissions to the ESP8266 will interfere.
 *   * ESP-01 modules are tricky. We suggest you use a module with more GPIOs
 *     for your first time. e.g. ESP-12 etc.
 *
 */
#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

const uint16_t kIrLed = 4; // ESP8266 GPIO pin to use. Recommended: 4 (D2).

IRsend irsend(kIrLed); // Set the GPIO to be used to sending the message.

// IO 0x396D9D18 (116 Bitsomewhere to store the results
uint16_t io[231] = {3238, 90, 788, 930, 3246, 82, 720, 996, 736, 946, 712, 970, 724, 956, 2388, 970, 716, 7588, 1558, 82, 1588, 108, 730, 976, 1496, 186, 1516, 162, 664, 1020, 656, 1024, 654, 1026, 664, 1016, 1520, 156, 658, 1030, 630, 7672, 1432, 268, 1342, 344, 490, 1190, 1286, 416, 1258, 424, 420, 1260, 422, 1260, 422, 1258, 422, 1258, 1262, 420, 422, 1258, 416, 7886, 1260, 422, 1258, 424, 416, 1264, 1260, 422, 1262, 418, 424, 1256, 430, 1252, 426, 1256, 424, 1256, 1258, 424, 416, 1264, 422, 7880, 1264, 418, 1260, 422, 416, 1264, 1260, 420, 1258, 424, 416, 1264, 420, 1262, 426, 1254, 428, 1252, 1258, 424, 422, 1260, 424, 7878, 1264, 418, 1258, 422, 416, 1264, 1260, 422, 1258, 422, 416, 1264, 422, 1260, 422, 1260, 420, 1260, 1262, 420, 420, 1260, 424, 7876, 1264, 418, 1264, 416, 420, 1260, 1258, 422, 1260, 422, 420, 1262, 422, 1258, 422, 1258, 424, 1256, 1260, 422, 420, 1260, 422, 7880, 1260, 422, 1266, 416, 416, 1264, 1264, 416, 1264, 418, 422, 1258, 424, 1258, 422, 1258, 426, 1254, 1260, 420, 420, 1260, 422, 7880, 1260, 422, 1262, 418, 420, 1260, 1258, 422, 1264, 416, 420, 1262, 422, 1258, 428, 1252, 424, 1256, 1260, 420, 422, 1260, 424, 7876, 1262, 420, 1258, 424, 420, 1260, 1260, 420, 1262, 420, 420, 1260, 418, 1262, 422, 1258, 426, 1254, 1260, 420, 346};

// Fire color 0x43904283 (118 Bits)
uint16_t fireColor[235] = {3192, 166, 668, 1014, 1506, 174, 1512, 166, 664, 1020, 694, 984, 704, 976, 668, 1008, 682, 1002, 1538, 138, 660, 7642, 1516, 160, 1502, 182, 652, 1030, 1496, 184, 1486, 194, 652, 1032, 664, 1016, 660, 1020, 652, 1028, 650, 1030, 1518, 158, 652, 7652, 1476, 200, 1402, 304, 514, 1168, 1326, 364, 1276, 420, 420, 1258, 420, 1262, 426, 1254, 424, 1256, 426, 1256, 1260, 420, 418, 7880, 1260, 420, 1258, 422, 414, 1266, 1262, 418, 1256, 426, 418, 1262, 422, 1258, 422, 1258, 428, 1252, 426, 1254, 1262, 418, 420, 7878, 1260, 422, 1258, 422, 416, 1264, 1262, 418, 1266, 414, 422, 1258, 422, 1256, 426, 1254, 424, 1256, 426, 1254, 1264, 416, 424, 7876, 1260, 422, 1264, 416, 422, 1258, 1260, 422, 1258, 422, 416, 1264, 424, 1256, 420, 1258, 420, 1260, 424, 1256, 1258, 422, 420, 7880, 1262, 418, 1252, 428, 414, 1266, 1264, 416, 1260, 420, 424, 1258, 422, 1258, 424, 1256, 424, 1254, 422, 1258, 1262, 420, 420, 7874, 1264, 420, 1246, 436, 412, 1268, 1252, 428, 1254, 426, 416, 1264, 418, 1262, 424, 1256, 420, 1260, 426, 1254, 1260, 420, 418, 7880, 1264, 418, 1262, 418, 424, 1256, 1266, 414, 1264, 418, 422, 1258, 420, 1258, 424, 1258, 426, 1254, 430, 1250, 1262, 420, 422, 7866, 1276, 416, 1248, 432, 410, 1270, 1252, 428, 1256, 424, 412, 1268, 418, 1262, 418, 1262, 426, 1254, 418, 1262, 336};

// Temperature 0x78732D09 (115 Bits)
uint16_t temperature[229] = {4078, 956, 1552, 134, 1546, 116, 748, 946, 718, 972, 684, 994, 722, 958, 726, 956, 700, 976, 1558, 6742, 4088, 962, 1508, 172, 1546, 130, 704, 984, 692, 988, 682, 998, 664, 1016, 654, 1028, 654, 1026, 1476, 6826, 1426, 274, 1346, 342, 492, 1188, 1288, 414, 1258, 424, 416, 1264, 416, 1264, 418, 1260, 426, 1256, 422, 1258, 420, 1260, 1260, 7040, 1258, 420, 1260, 420, 422, 1260, 1264, 416, 1258, 422, 420, 1260, 422, 1258, 424, 1256, 428, 1254, 428, 1252, 426, 1254, 1262, 7038, 1264, 418, 1258, 422, 420, 1260, 1256, 424, 1260, 420, 418, 1262, 420, 1260, 426, 1256, 424, 1256, 428, 1252, 422, 1258, 1262, 7036, 1262, 418, 1254, 428, 418, 1262, 1266, 414, 1264, 416, 424, 1256, 424, 1256, 424, 1256, 424, 1256, 424, 1256, 428, 1254, 1266, 7034, 1260, 420, 1260, 420, 426, 1254, 1262, 420, 1260, 420, 420, 1262, 422, 1258, 420, 1260, 426, 1254, 424, 1256, 424, 1256, 1260, 7040, 1266, 414, 1260, 422, 416, 1264, 1260, 420, 1262, 418, 422, 1260, 422, 1258, 420, 1260, 426, 1254, 424, 1256, 432, 1250, 1260, 7040, 1260, 422, 1264, 416, 424, 1256, 1256, 426, 1260, 422, 414, 1266, 414, 1266, 422, 1258, 420, 1262, 426, 1254, 428, 1252, 1264, 7036, 1260, 422, 1262, 420, 420, 1260, 1264, 416, 1260, 420, 424, 1256, 422, 1258, 422, 1260, 426, 1254, 428, 1252, 352};

// Time 0x42C99345 (119 Bits)
uint16_t timeFire[237] = {1554, 128, 1530, 148, 698, 1006, 1504, 172, 1516, 164, 690, 994, 1534, 126, 684, 1016, 704, 978, 678, 1000, 684, 1000, 672, 7626, 1510, 152, 1524, 172, 682, 1004, 1504, 172, 1486, 200, 650, 1032, 1480, 198, 642, 1042, 642, 1038, 648, 1032, 648, 1032, 646, 7654, 1482, 198, 1456, 228, 570, 1128, 1342, 344, 1300, 398, 432, 1252, 1256, 426, 418, 1262, 424, 1256, 420, 1260, 422, 1260, 422, 7876, 1258, 424, 1260, 420, 420, 1260, 1260, 422, 1260, 420, 416, 1264, 1264, 416, 424, 1256, 428, 1252, 426, 1254, 426, 1252, 426, 7872, 1260, 422, 1260, 420, 416, 1264, 1262, 418, 1264, 416, 422, 1256, 1260, 422, 416, 1262, 424, 1256, 424, 1258, 422, 1258, 424, 7868, 1274, 412, 1264, 418, 420, 1258, 1262, 418, 1262, 420, 420, 1260, 1254, 426, 414, 1266, 420, 1260, 418, 1262, 426, 1254, 426, 7874, 1264, 416, 1264, 418, 420, 1260, 1260, 420, 1264, 420, 414, 1262, 1258, 422, 420, 1260, 424, 1256, 426, 1254, 424, 1254, 424, 7876, 1264, 418, 1264, 416, 420, 1260, 1264, 416, 1260, 420, 418, 1262, 1266, 416, 420, 1260, 424, 1256, 426, 1254, 428, 1252, 420, 7878, 1266, 416, 1262, 418, 422, 1258, 1264, 416, 1258, 422, 416, 1264, 1264, 418, 420, 1260, 424, 1256, 426, 1256, 424, 1256, 418, 7880, 1266, 418, 1256, 424, 420, 1260, 1264, 416, 1256, 424, 418, 1262, 1262, 418, 426, 1256, 424, 1256, 424, 1256, 368};

// LED color 0x2CD18C2A (108 Bits)
uint16_t ledColor[215] = {1500, 178, 1532, 134, 686, 1010, 1510, 152, 1572, 126, 692, 994, 668, 994, 1554, 122, 698, 1006, 686, 994, 686, 984, 682, 7630, 1486, 188, 1536, 144, 664, 1018, 1494, 186, 1490, 192, 642, 1042, 640, 1040, 1494, 186, 640, 1042, 648, 1032, 648, 1034, 646, 7654, 1482, 196, 1450, 240, 558, 1134, 1346, 340, 1304, 396, 432, 1250, 428, 1252, 1262, 420, 418, 1262, 420, 1258, 426, 1256, 424, 7874, 1264, 418, 1262, 420, 422, 1260, 1258, 422, 1264, 416, 420, 1260, 424, 1256, 1264, 418, 418, 1264, 420, 1260, 422, 1260, 420, 7880, 1258, 422, 1258, 422, 420, 1262, 1258, 424, 1264, 416, 418, 1262, 422, 1258, 1262, 420, 420, 1260, 420, 1260, 428, 1252, 422, 7878, 1256, 426, 1262, 418, 416, 1264, 1264, 416, 1258, 422, 418, 1262, 422, 1258, 1262, 420, 424, 1258, 424, 1256, 428, 1254, 426, 7874, 1264, 418, 1258, 424, 418, 1262, 1260, 420, 1260, 420, 420, 1260, 424, 1256, 1260, 422, 420, 1258, 424, 1256, 428, 1252, 420, 7880, 1262, 420, 1260, 420, 418, 1262, 1262, 420, 1262, 418, 420, 1262, 422, 1258, 1260, 420, 420, 1260, 420, 1262, 424, 1256, 428, 7872, 1266, 420, 1262, 418, 422, 1258, 1260, 422, 1264, 418, 424, 1258, 424, 1254, 1264, 416, 420, 1262, 426, 1254, 426, 1254, 422};

void setup()
{
  irsend.begin();
#if ESP8266
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
#else  // ESP8266
  Serial.begin(115200, SERIAL_8N1);
#endif // ESP8266
}

void loop()
{
  Serial.println("allumer/eteindre");
  // irsend.sendRaw(io, 231, 38);
  irsend.sendRaw(io, 231, 38);
  delay(2000);
}
